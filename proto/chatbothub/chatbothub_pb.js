/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.chatbothub.BotsInfo', null, global);
goog.exportSymbol('proto.chatbothub.BotsReply', null, global);
goog.exportSymbol('proto.chatbothub.BotsRequest', null, global);
goog.exportSymbol('proto.chatbothub.EventReply', null, global);
goog.exportSymbol('proto.chatbothub.EventRequest', null, global);
goog.exportSymbol('proto.chatbothub.LoginBotReply', null, global);
goog.exportSymbol('proto.chatbothub.LoginBotRequest', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chatbothub.EventRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chatbothub.EventRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.chatbothub.EventRequest.displayName = 'proto.chatbothub.EventRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chatbothub.EventRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.chatbothub.EventRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chatbothub.EventRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatbothub.EventRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventtype: jspb.Message.getFieldWithDefault(msg, 1, ""),
    body: jspb.Message.getFieldWithDefault(msg, 2, ""),
    clientid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    clienttype: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chatbothub.EventRequest}
 */
proto.chatbothub.EventRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chatbothub.EventRequest;
  return proto.chatbothub.EventRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chatbothub.EventRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chatbothub.EventRequest}
 */
proto.chatbothub.EventRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventtype(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBody(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setClienttype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chatbothub.EventRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chatbothub.EventRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chatbothub.EventRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatbothub.EventRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventtype();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBody();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getClientid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getClienttype();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string eventType = 1;
 * @return {string}
 */
proto.chatbothub.EventRequest.prototype.getEventtype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.chatbothub.EventRequest.prototype.setEventtype = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string body = 2;
 * @return {string}
 */
proto.chatbothub.EventRequest.prototype.getBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.chatbothub.EventRequest.prototype.setBody = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string clientId = 3;
 * @return {string}
 */
proto.chatbothub.EventRequest.prototype.getClientid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.chatbothub.EventRequest.prototype.setClientid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string clientType = 4;
 * @return {string}
 */
proto.chatbothub.EventRequest.prototype.getClienttype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.chatbothub.EventRequest.prototype.setClienttype = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chatbothub.EventReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chatbothub.EventReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.chatbothub.EventReply.displayName = 'proto.chatbothub.EventReply';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chatbothub.EventReply.prototype.toObject = function(opt_includeInstance) {
  return proto.chatbothub.EventReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chatbothub.EventReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatbothub.EventReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventtype: jspb.Message.getFieldWithDefault(msg, 1, ""),
    body: jspb.Message.getFieldWithDefault(msg, 2, ""),
    clientid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    clienttype: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chatbothub.EventReply}
 */
proto.chatbothub.EventReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chatbothub.EventReply;
  return proto.chatbothub.EventReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chatbothub.EventReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chatbothub.EventReply}
 */
proto.chatbothub.EventReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventtype(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBody(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setClienttype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chatbothub.EventReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chatbothub.EventReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chatbothub.EventReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatbothub.EventReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventtype();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBody();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getClientid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getClienttype();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string eventType = 1;
 * @return {string}
 */
proto.chatbothub.EventReply.prototype.getEventtype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.chatbothub.EventReply.prototype.setEventtype = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string body = 2;
 * @return {string}
 */
proto.chatbothub.EventReply.prototype.getBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.chatbothub.EventReply.prototype.setBody = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string clientId = 3;
 * @return {string}
 */
proto.chatbothub.EventReply.prototype.getClientid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.chatbothub.EventReply.prototype.setClientid = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string clientType = 4;
 * @return {string}
 */
proto.chatbothub.EventReply.prototype.getClienttype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.chatbothub.EventReply.prototype.setClienttype = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chatbothub.BotsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.chatbothub.BotsRequest.repeatedFields_, null);
};
goog.inherits(proto.chatbothub.BotsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.chatbothub.BotsRequest.displayName = 'proto.chatbothub.BotsRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.chatbothub.BotsRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chatbothub.BotsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.chatbothub.BotsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chatbothub.BotsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatbothub.BotsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    loginsList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chatbothub.BotsRequest}
 */
proto.chatbothub.BotsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chatbothub.BotsRequest;
  return proto.chatbothub.BotsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chatbothub.BotsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chatbothub.BotsRequest}
 */
proto.chatbothub.BotsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addLogins(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chatbothub.BotsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chatbothub.BotsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chatbothub.BotsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatbothub.BotsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLoginsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string logins = 1;
 * @return {!Array.<string>}
 */
proto.chatbothub.BotsRequest.prototype.getLoginsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<string>} value */
proto.chatbothub.BotsRequest.prototype.setLoginsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.chatbothub.BotsRequest.prototype.addLogins = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.chatbothub.BotsRequest.prototype.clearLoginsList = function() {
  this.setLoginsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chatbothub.BotsReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.chatbothub.BotsReply.repeatedFields_, null);
};
goog.inherits(proto.chatbothub.BotsReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.chatbothub.BotsReply.displayName = 'proto.chatbothub.BotsReply';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.chatbothub.BotsReply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chatbothub.BotsReply.prototype.toObject = function(opt_includeInstance) {
  return proto.chatbothub.BotsReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chatbothub.BotsReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatbothub.BotsReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    botsinfoList: jspb.Message.toObjectList(msg.getBotsinfoList(),
    proto.chatbothub.BotsInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chatbothub.BotsReply}
 */
proto.chatbothub.BotsReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chatbothub.BotsReply;
  return proto.chatbothub.BotsReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chatbothub.BotsReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chatbothub.BotsReply}
 */
proto.chatbothub.BotsReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.chatbothub.BotsInfo;
      reader.readMessage(value,proto.chatbothub.BotsInfo.deserializeBinaryFromReader);
      msg.addBotsinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chatbothub.BotsReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chatbothub.BotsReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chatbothub.BotsReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatbothub.BotsReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBotsinfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.chatbothub.BotsInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated BotsInfo botsInfo = 1;
 * @return {!Array.<!proto.chatbothub.BotsInfo>}
 */
proto.chatbothub.BotsReply.prototype.getBotsinfoList = function() {
  return /** @type{!Array.<!proto.chatbothub.BotsInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.chatbothub.BotsInfo, 1));
};


/** @param {!Array.<!proto.chatbothub.BotsInfo>} value */
proto.chatbothub.BotsReply.prototype.setBotsinfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.chatbothub.BotsInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.chatbothub.BotsInfo}
 */
proto.chatbothub.BotsReply.prototype.addBotsinfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.chatbothub.BotsInfo, opt_index);
};


proto.chatbothub.BotsReply.prototype.clearBotsinfoList = function() {
  this.setBotsinfoList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chatbothub.BotsInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chatbothub.BotsInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.chatbothub.BotsInfo.displayName = 'proto.chatbothub.BotsInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chatbothub.BotsInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.chatbothub.BotsInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chatbothub.BotsInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatbothub.BotsInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    clienttype: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, ""),
    startat: jspb.Message.getFieldWithDefault(msg, 4, 0),
    lastping: jspb.Message.getFieldWithDefault(msg, 5, 0),
    login: jspb.Message.getFieldWithDefault(msg, 6, ""),
    logininfo: jspb.Message.getFieldWithDefault(msg, 7, ""),
    status: jspb.Message.getFieldWithDefault(msg, 8, 0),
    filterinfo: jspb.Message.getFieldWithDefault(msg, 9, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chatbothub.BotsInfo}
 */
proto.chatbothub.BotsInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chatbothub.BotsInfo;
  return proto.chatbothub.BotsInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chatbothub.BotsInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chatbothub.BotsInfo}
 */
proto.chatbothub.BotsInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClienttype(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStartat(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastping(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogin(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogininfo(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilterinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chatbothub.BotsInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chatbothub.BotsInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chatbothub.BotsInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatbothub.BotsInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getClienttype();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getStartat();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getLastping();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getLogin();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getLogininfo();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getFilterinfo();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional string clientId = 1;
 * @return {string}
 */
proto.chatbothub.BotsInfo.prototype.getClientid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.chatbothub.BotsInfo.prototype.setClientid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string clientType = 2;
 * @return {string}
 */
proto.chatbothub.BotsInfo.prototype.getClienttype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.chatbothub.BotsInfo.prototype.setClienttype = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.chatbothub.BotsInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.chatbothub.BotsInfo.prototype.setName = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional int64 startAt = 4;
 * @return {number}
 */
proto.chatbothub.BotsInfo.prototype.getStartat = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.chatbothub.BotsInfo.prototype.setStartat = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional int64 lastPing = 5;
 * @return {number}
 */
proto.chatbothub.BotsInfo.prototype.getLastping = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.chatbothub.BotsInfo.prototype.setLastping = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string login = 6;
 * @return {string}
 */
proto.chatbothub.BotsInfo.prototype.getLogin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.chatbothub.BotsInfo.prototype.setLogin = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string loginInfo = 7;
 * @return {string}
 */
proto.chatbothub.BotsInfo.prototype.getLogininfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.chatbothub.BotsInfo.prototype.setLogininfo = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional int32 status = 8;
 * @return {number}
 */
proto.chatbothub.BotsInfo.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.chatbothub.BotsInfo.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional string filterInfo = 9;
 * @return {string}
 */
proto.chatbothub.BotsInfo.prototype.getFilterinfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.chatbothub.BotsInfo.prototype.setFilterinfo = function(value) {
  jspb.Message.setField(this, 9, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chatbothub.LoginBotRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chatbothub.LoginBotRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.chatbothub.LoginBotRequest.displayName = 'proto.chatbothub.LoginBotRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chatbothub.LoginBotRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.chatbothub.LoginBotRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chatbothub.LoginBotRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatbothub.LoginBotRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    clienttype: jspb.Message.getFieldWithDefault(msg, 2, ""),
    login: jspb.Message.getFieldWithDefault(msg, 3, ""),
    password: jspb.Message.getFieldWithDefault(msg, 4, ""),
    notifyurl: jspb.Message.getFieldWithDefault(msg, 5, ""),
    logininfo: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chatbothub.LoginBotRequest}
 */
proto.chatbothub.LoginBotRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chatbothub.LoginBotRequest;
  return proto.chatbothub.LoginBotRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chatbothub.LoginBotRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chatbothub.LoginBotRequest}
 */
proto.chatbothub.LoginBotRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClienttype(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogin(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setNotifyurl(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogininfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chatbothub.LoginBotRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chatbothub.LoginBotRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chatbothub.LoginBotRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatbothub.LoginBotRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getClienttype();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLogin();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getNotifyurl();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getLogininfo();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string clientId = 1;
 * @return {string}
 */
proto.chatbothub.LoginBotRequest.prototype.getClientid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.chatbothub.LoginBotRequest.prototype.setClientid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string clientType = 2;
 * @return {string}
 */
proto.chatbothub.LoginBotRequest.prototype.getClienttype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.chatbothub.LoginBotRequest.prototype.setClienttype = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string login = 3;
 * @return {string}
 */
proto.chatbothub.LoginBotRequest.prototype.getLogin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.chatbothub.LoginBotRequest.prototype.setLogin = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string password = 4;
 * @return {string}
 */
proto.chatbothub.LoginBotRequest.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.chatbothub.LoginBotRequest.prototype.setPassword = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string notifyUrl = 5;
 * @return {string}
 */
proto.chatbothub.LoginBotRequest.prototype.getNotifyurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.chatbothub.LoginBotRequest.prototype.setNotifyurl = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string loginInfo = 6;
 * @return {string}
 */
proto.chatbothub.LoginBotRequest.prototype.getLogininfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.chatbothub.LoginBotRequest.prototype.setLogininfo = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chatbothub.LoginBotReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chatbothub.LoginBotReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.chatbothub.LoginBotReply.displayName = 'proto.chatbothub.LoginBotReply';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chatbothub.LoginBotReply.prototype.toObject = function(opt_includeInstance) {
  return proto.chatbothub.LoginBotReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chatbothub.LoginBotReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatbothub.LoginBotReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    msg: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chatbothub.LoginBotReply}
 */
proto.chatbothub.LoginBotReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chatbothub.LoginBotReply;
  return proto.chatbothub.LoginBotReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chatbothub.LoginBotReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chatbothub.LoginBotReply}
 */
proto.chatbothub.LoginBotReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chatbothub.LoginBotReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chatbothub.LoginBotReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chatbothub.LoginBotReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chatbothub.LoginBotReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMsg();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string msg = 1;
 * @return {string}
 */
proto.chatbothub.LoginBotReply.prototype.getMsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.chatbothub.LoginBotReply.prototype.setMsg = function(value) {
  jspb.Message.setField(this, 1, value);
};


goog.object.extend(exports, proto.chatbothub);
